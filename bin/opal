#!/usr/bin/env python
"""
OPAL Admin script.
In which we expose useful commandline functionality to our users.
"""
import argparse
import os
import sys

import ffs
from ffs import nix
from ffs.contrib import mold

import opal

USERLAND_HERE = ffs.Path('.').abspath
SCRIPT_HERE = ffs.Path(__file__).parent
SCAFFOLD = SCRIPT_HERE/'scaffold'

def interpolate_dir(directory, **context):
    """
    Iterate through .jinja2 files in DIRECTORY, rendering them as
    files with CONTEXT.
    """
    for t in directory.ls('*.jinja2'):
        realname = str(t[-1]).replace('.jinja2', '')
        target = t[:-1]/realname
        target << mold.cast(t, **context)
        t.rm()
    return

def startproject(args):
    """
    In which we perform the steps required to start a new OPAL project.
    
    1. Run Django' Startproject
    2. Create a data/lookuplists dir
    3. Copy across the scaffolding directory
    4. Interpolate our project data into the templates.
    5. Swap our scaffold app with the Django created app
    6. Interpolate the code templates from our scaffold app
    7. Create extra directories we need
    8. Run Django's migrations
    9. Create a superuser
    """
    name = args.name
    
    project_dir = USERLAND_HERE/name
    if project_dir:
        print "\n\nDirectory", project_dir, "already exists !"
        print "Please remove it or choose a new name.\n\n"
        sys.exit(1)

    # 1. Run Django Startproject
    print "Creating project dir at {0}".format(project_dir)
    os.system('django-admin.py startproject {0}'.format(name))

    print "Bootstrapping your OPAL project..."
    
    # 2. Create empty directories
    lookuplists = project_dir/'data/lookuplists'
    lookuplists.mkdir()

    # 3. Copy across the scaffold
    with SCAFFOLD:
        for p in SCAFFOLD.ls():
            target = project_dir/p[-1]
            p.cp(target)

    # Dotfiles need their dot back
    gitignore = project_dir/'gitignore'
    gitignore.mv(project_dir/'.gitignore')
    

    # 3. Interpolate the project data
    interpolate_dir(project_dir, name=name)
    
    app_dir = project_dir/name

    # 5. Django Startproject creates some things - let's kill them & 
    # replace with our own things.
    nix.rm(app_dir, recursive=True, force=True)
    nix.mv(project_dir/'app', app_dir)

    # 6. Interpolate code from our scaffold app
    # !!! TODO: make this a reals secret key please!
    interpolate_dir(app_dir, name=name, secret_key='foobarbaz')

    # 7. Create extra directories we need
    js = app_dir/'assets/js'
    css = app_dir/'assets/css'
    js.mkdir()
    css.mkdir()

    templates = app_dir/'templates'/name    
    templates.mkdir()

    def manage(command):
        os.system('python {name}/manage.py {command} --traceback'.format(
            name=name, command=command))
        

    # 8. Run Django's migrations
    print 'Creating Database'
    manage('schemamigration {0} --initial'.format(name))
    manage('syncdb --migrate --noinput')

    # 9. Create a superuser
    sys.path.append(os.path.join(os.path.abspath('.'), name))

    os.environ['DJANGO_SETTINGS_MODULE'] = '{0}.settings'.format(name)
    # FTW? Why does this only work when we do this thing?
    from mynewapp import flow

    from django.contrib.auth.models import User
    user = User(username='super')
    user.set_password('super1')
    user.is_superuser = True
    user.is_staff = True
    user.save()
    from opal.models import UserProfile
    profile, _ = UserProfile.objects.get_or_create(user=user)
    profile.force_password_change = False
    profile.save()
 
    return

def startplugin(args):
    """
    The steps to create our plugin are: 

    * Create a top level directory (from sys.argv)
    * Create a setup.py
    * Create a readme
    * Create a license
    * Create the raw subfiles 
      - __init__.py with plugin subclass
      - static directory
      - templates directory
    * Drop in default .gitignore
    """
    name = args.name

    root = USERLAND_HERE/name
    root.mkdir()
    codename = str(root[-1]).replace('opal-', '')
    code_root = root/codename
    code_root.mkdir()
    init = code_root/'__init__.py'
    init.touch()
    templates = code_root/'templates'
    templates.mkdir()
    static = code_root/'static'
    return

def main():
    parser = argparse.ArgumentParser(
        description="OPAL a Clinical Transactional Digital Services Framework",
        usage="opal <command> [<args>]",
        epilog="Brought to you by Open Health Care UK"
    )
    parser.add_argument(
        '--version',
        action='version',
        version = 'OPAL {0}'.format(opal.__version__)
    )
    subparsers = parser.add_subparsers(help="OPAL Commands")

    parser_project = subparsers.add_parser(
        'startproject'
    )
    parser_project.add_argument(
        'name', help="name of your project"
    )
    parser_project.set_defaults(func=startproject)

    parser_plugin = subparsers.add_parser('startplugin')
    parser_plugin.add_argument(
        'name', help="name of your plugin"
    )
    parser_plugin.set_defaults(func=startplugin)
    
    args = parser.parse_args()
    args.func(args)

    sys.exit(0)

if __name__ == '__main__':
    main()
