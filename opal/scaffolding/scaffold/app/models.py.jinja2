#-*- mode: python; -*-
"""
{{ name }} models.
"""
from django.db import models

from opal import models as omodels
from opal.core import fields
from opal.core.referencedata import models as referencemodels

"""
Core Opal models - these models are generated by the Opal scaffolding.
"""

class Location(omodels.EpisodeSubrecord):
    """
    For inpatients, model their location at a hospital.
    """
    _is_singleton = True

    hospital = models.CharField(max_length=255, blank=True)
    ward     = models.CharField(max_length=255, blank=True)
    bed      = models.CharField(max_length=255, blank=True)


class Allergies(omodels.PatientSubrecord):
    HELP_PROVISIONAL = "True if the allergy is only suspected. \
Defaults to False."

    drug        = fields.ForeignKeyOrFreeText(referencemodels.Drug)
    provisional = models.BooleanField(
        default=False, verbose_name="Suspected?",
        help_text=HELP_PROVISIONAL
    )
    details     = models.CharField(max_length=255, blank=True)

    class Meta:
        verbose_name_plural = "Allergies"


class Diagnosis(omodels.EpisodeSubrecord):
    """
    This is a working-diagnosis list, will often contain things that are
    not technically diagnoses, but is for historical reasons, called diagnosis.
    """
    _sort = 'date_of_diagnosis'

    condition         = fields.ForeignKeyOrFreeText(referencemodels.Condition)
    provisional       = models.BooleanField(
        default=False,
        verbose_name="Provisional?",
        help_text="True if the diagnosis is provisional. Defaults to False"
    )
    details           = models.TextField(blank=True)
    date_of_diagnosis = models.DateField(blank=True, null=True)

    class Meta:
        verbose_name = 'Diagnosis / Issues'
        verbose_name_plural = "Diagnoses"


class PastMedicalHistory(omodels.EpisodeSubrecord):
    _sort = 'year'

    condition = fields.ForeignKeyOrFreeText(referencemodels.Condition)
    year      = models.CharField(max_length=4, blank=True)
    details   = models.CharField(max_length=255, blank=True)

    class Meta:
        verbose_name = "PMH"
        verbose_name_plural = "Past medical histories"


class Treatment(omodels.EpisodeSubrecord):
    _sort = 'start_date'

    HELP_START = "The date on which the patient began receiving this \
treatment."

    drug          = fields.ForeignKeyOrFreeText(referencemodels.Drug)
    dose          = models.CharField(max_length=255, blank=True)
    route         = fields.ForeignKeyOrFreeText(referencemodels.Drugroute)
    start_date    = models.DateField(
        null=True, blank=True,
        help_text=HELP_START
    )
    end_date      = models.DateField(null=True, blank=True)
    frequency     = fields.ForeignKeyOrFreeText(referencemodels.Drugfreq)

    class Meta:
        abstract = True


class InpatientAdmission(omodels.PatientSubrecord):
    _sort = "-admitted"
    _advanced_searchable = False

    datetime_of_admission = models.DateTimeField(blank=True, null=True)
    datetime_of_discharge = models.DateTimeField(blank=True, null=True)
    hospital = models.CharField(max_length=255, blank=True)
    ward_code = models.CharField(max_length=255, blank=True)
    room_code = models.CharField(max_length=255, blank=True)
    bed_code = models.CharField(max_length=255, blank=True)
    admission_diagnosis = models.CharField(max_length=255, blank=True)

    class Meta:
        verbose_name = 'Inpatient Admissions'


class ReferralRoute(omodels.EpisodeSubrecord):
    _is_singleton = True

    class Meta:
        abstract = True
        verbose_name = 'Referral Route'

    internal = models.NullBooleanField()

    # e.g. GP, the title or institution of the person who referred the patient
    referral_organisation = fields.ForeignKeyOrFreeText(referencemodels.ReferralOrganisation)

    # the name of the person who referred the patient, e.g. the GPs name
    referral_name = models.CharField(max_length=255, blank=True)

    # date_of_referral
    date_of_referral = models.DateField(null=True, blank=True)

    # an individual can be from multiple teams
    referral_team = fields.ForeignKeyOrFreeText(referencemodels.Speciality)

    referral_type = fields.ForeignKeyOrFreeText(referencemodels.ReferralType)


class PatientConsultation(omodels.EpisodeSubrecord):
    _sort = 'when'
    _list_limit = 3

    class Meta:
        verbose_name = "Patient Consultation"

    when = models.DateField(null=True, blank=True)
    initials = models.CharField(
        max_length=255, blank=True,
        help_text="The initials of the user who gave the consult."
    )
    reason_for_interaction = fields.ForeignKeyOrFreeText(
        referencemodels.PatientConsultationReasonForInteraction

    )
    discussion = models.TextField(blank=True)



class SymptomComplex(omodels.EpisodeSubrecord):

    class Meta:
        abstract = True
        verbose_name = "Symptom"
        verbose_name_plural = "Symptom complexes"

    symptoms = models.ManyToManyField(
        referencemodels.Symptom, related_name="symptoms", blank=True
    )
    DURATION_CHOICES = (
        ('3 days or less', '3 days or less'),
        ('4-10 days', '4-10 days'),
        ('11-21 days', '11-21 days'),
        ('22 days to 3 months', '22 days to 3 months'),
        ('over 3 months', 'over 3 months')
    )
    HELP_DURATION = "The duration for which the patient had been experiencing \
these symptoms when recorded."

    duration = models.CharField(
        max_length=255,
        blank=True,
        null=True,
        choices=DURATION_CHOICES,
        help_text=HELP_DURATION
    )
    details = models.TextField(blank=True, null=True)

    def to_dict(self, user):
        field_names = self.__class__._get_fieldnames_to_serialize()
        result = {
            i: getattr(self, i) for i in field_names if not i == "symptoms"
        }
        result["symptoms"] = list(self.symptoms.values_list("name", flat=True))
        return result

"""
End Opal core models
"""
